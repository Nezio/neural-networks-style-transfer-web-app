@model StyleTransferWebApp.Models.StyleTransferViewModel

@{
    ViewBag.Title = "Home Page";
}

<div id="dropzone" class="flex-container">
    <form action=@Url.Action("UploadContentImage", "Home") class="dropzone flex-child" id="dropzoneContent" enctype="multipart/form-data"></form>
    <form action=@Url.Action("UploadStyleImage", "Home") class="dropzone flex-child" id="dropzoneStyle" enctype="multipart/form-data"></form>
</div>

<div class="col text-center">
    <input type="button" value="Start style transfer" class="btn btn-primary" onclick="location.href='@Url.Action("StartStyleTransfer", "Home")'" />
</div>

<hr />

<div id="userResultsContainer">

</div>


@section Scripts{

    @*rendering section*@
<script>
        function ImageClick(image) {
            window.open(image.src)
        };

        function Delete(folder) {
            $(function () {
                $.post('/Home/DeleteOutputFolder',
                    { folder: folder }, function (data) {
                        alert(data.message);

                        if (data.success) {
                            window.location.href = '@Url.Action("Index", "Home")';
                        }
                });
            });
        }

        // get data from model
        let styleTransferUserResults = @Html.Raw(Json.Encode(Model.styleTransferUserResults));

        let maxImageWidth = 300;
        let maxButtonImageWidth = 20;

        // render result images for each output folder this user has
        styleTransferUserResults.forEach(function (styleTransferUserResult) {
            let resultContainer = $('<div>');
            resultContainer.attr('class', 'resultContainer')

            // add content image
            let contentImage = $('<img>');
            contentImage.attr('src', '/' + styleTransferUserResult.contentImage);
            contentImage.attr('class', 'image')
            contentImage.attr('width', maxImageWidth)
            contentImage.attr('onClick', 'ImageClick(this)')
            contentImage.appendTo(resultContainer);

            // add style image
            let styleImage = $('<img>');
            styleImage.attr('src', '/' + styleTransferUserResult.styleImage);
            styleImage.attr('class', 'image')
            styleImage.attr('width', maxImageWidth)
            styleImage.attr('onClick', 'ImageClick(this)')
            styleImage.appendTo(resultContainer);

            // add the last generated image
            let generatedImage = $('<img>');
            let fullGeneratedImagePath = styleTransferUserResult.generatedImages[styleTransferUserResult.generatedImages.length - 1];
            let generatedImageName = fullGeneratedImagePath.split('/')[fullGeneratedImagePath.split('/').length - 1].toLowerCase()
            generatedImage.attr('src', '/' + fullGeneratedImagePath);
            generatedImage.attr('class', 'image')
            generatedImage.attr('width', maxImageWidth)
            generatedImage.attr('onClick', 'ImageClick(this)')
            if (generatedImageName.includes('queue')) {
                // attach InQueue class and data
                generatedImage.attr('class', 'image inqueue')
                let inputFolderArray = styleTransferUserResult.contentImage.split('/')
                let inputFolderNameArray = inputFolderArray[inputFolderArray.length - 2].split('_')
                let outputFolderName = inputFolderNameArray[0] + '_' + inputFolderNameArray[2]
                generatedImage.attr('data-folder', outputFolderName)
            }
            if (generatedImageName.includes('wip')) {
                // attach WIP class and data
                generatedImage.attr('class', 'image wip')
                let inputFolderArray = styleTransferUserResult.contentImage.split('/')
                let outputFolderName = inputFolderArray[inputFolderArray.length - 3]
                generatedImage.attr('data-folder', outputFolderName)
            }
            generatedImage.appendTo(resultContainer);

            // add delete button for completed jobs
            let outputFolderName = fullGeneratedImagePath.split('/')[fullGeneratedImagePath.split('/').length - 2]
            if (!generatedImageName.includes('queue') && !generatedImageName.includes('wip') && !generatedImageName.includes('404')) {
                // only add delete button for processed folders
                let deleteButton = CreateDeleteButton(outputFolderName);

                deleteButton.appendTo(resultContainer);
            }

            // append result container to the user results container
            resultContainer.appendTo($('#userResultsContainer'));
        });

        // define a delete button
        function CreateDeleteButton(folder) {
            let deleteButton = $('<img>');
            deleteButton.attr('src', '/Content/Images/delete.png');
            deleteButton.attr('class', 'button-image')
            deleteButton.attr('width', maxButtonImageWidth)
            deleteButton.attr('onClick', 'Delete("' + folder + '")')

            return deleteButton;
        }

        // check for image updates
        (function worker() {
            // get image elements to check
            let wipGeneratedImageElements = $('.wip')
            let inqueueGeneratedImageElements = $('.inqueue')

            // get folders for all wip image elements
            let wipGeneratedImageFolders = new Array();
            wipGeneratedImageElements.each(function (i, element) {
                let folder = element.attributes["data-folder"].value;
                wipGeneratedImageFolders.push(folder);
            });

            // get folders for all inqueue image elements
            let inqueueGeneratedImageFolders = new Array();
            inqueueGeneratedImageElements.each(function (i, element) {
                let folder = element.attributes["data-folder"].value;
                inqueueGeneratedImageFolders.push(folder);
            });

            // skip the request if there are no folders to query
            if (wipGeneratedImageFolders.length == 0 && inqueueGeneratedImageFolders.length == 0) {
                console.log('Image update fetch skipped.');
                setTimeout(worker, 3000);
                return;
            }

            $.ajax({
                type: 'post',
                data: { wipFolders: wipGeneratedImageFolders, inqueueFolders: inqueueGeneratedImageFolders},
                url: '@Url.Action("GetGeneratedImagesFromFolders", "Home")',
                success: function (data) {
                    // check for updates and update image src
                    console.log('Updated images fetched.');

                    // update wip images if needed
                    wipGeneratedImageElements.each(function (i, element) {
                        let folder = element.attributes["data-folder"].value;
                        if (!data.newGeneratedImages) {
                            return; // continue
                        }

                        let newImagePath = data.newGeneratedImages[folder];
                        if (!newImagePath) {
                            return; // continue if no match found (just in case; this should never happen)
                        }

                        // update src if image is changed
                        if (!element.src.includes(newImagePath)) {
                            element.src = '/' + newImagePath;

                            // remove WIP class and add delete button if final image
                            if (newImagePath.includes('final')) {
                                element.classList.remove('wip')

                                let deleteButton = CreateDeleteButton(folder);
                                deleteButton.appendTo(element.parentElement);
                            }

                        }
                    });

                    // update inqueue images to WIP images if needed
                    inqueueGeneratedImageElements.each(function (i, element) {
                        let folder = element.attributes["data-folder"].value;
                        if (!data.folderStartedProcessing) {
                            return; // continue
                        }
                        let folderStartedProcessing = data.folderStartedProcessing[folder];
                        if (folderStartedProcessing == undefined || folderStartedProcessing == null) {
                            return; // continue if no match found (just in case; this should never happen)
                        }

                        // update src if image started processing
                        if (folderStartedProcessing) {
                            element.src = '/Content/Images/WIP.jpg';

                            // remove inqueue class and add wip
                            element.classList.remove('inqueue');
                            element.classList.add('wip');
                        }
                    });

                },
                error: function (data) {
                    console.log('Fetching updated images failed with: ' + data.exception);
                },
                complete: function () {
                    // schedule the next check when the current one is complete
                    setTimeout(worker, 3000);
                }
            });

        })();

</script>


    @*initialization for the separate script files*@
    <script>
        var responseMessage = '@Model.responseMessage';
    </script>

    @*include separate script files*@
    <script src="@Url.Content("~/Scripts/Home/index.js")"></script>
}